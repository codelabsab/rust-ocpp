initSidebarItems({"enum":[["GenericFraction","Generic implementation of the fraction type"],["Sign","Sign representation"]],"mod":[["convert","Optimistic type conversion"],["display","Implementation of fmt::Display for [GenericFraction] and [Sign] structures"],["division","Lossless integer division"],["error","Crate error types"],["generic","Integer generic traits and operations"],["prelude","Predefines some types for the most common use cases"]],"struct":[["BigInt","A big signed integer type."],["BigUint","A big unsigned integer type."],["ParseRatioError",""],["Ratio","Represents the ratio between two numbers."]],"trait":[["Bounded","Numbers which have upper and lower bounds"],["CheckedAdd","Performs addition that returns `None` instead of wrapping around on overflow."],["CheckedDiv","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow."],["CheckedMul","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow."],["CheckedSub","Performs subtraction that returns `None` instead of wrapping around on underflow."],["FromPrimitive","A generic trait for converting a number to a value."],["Integer",""],["Num","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion."],["One","Defines a multiplicative identity element for `Self`."],["Signed","Useful functions for signed numbers (i.e. numbers that can be negative)."],["ToPrimitive","A generic trait for converting a value to a number."],["Zero","Defines an additive identity element for `Self`."]]});