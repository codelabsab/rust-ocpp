use crate::v2_1::datatypes::{AddressType, CustomDataType};
use crate::v2_1::enumerations::PaymentStatusEnumType;
use chrono::{DateTime, Utc};
use rust_decimal::Decimal;
use serde::{Deserialize, Serialize};
use validator::Validate;

/// Request body for the NotifySettlement request.
#[derive(Debug, Clone, PartialEq, Deserialize, Serialize, Validate)]
#[serde(rename_all = "camelCase")]
pub struct NotifySettlementRequest {
    /// The _transactionId_ that the settlement belongs to. Can be empty if the payment transaction is canceled prior to the start of the OCPP transaction.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 36))]
    pub transaction_id: Option<String>,

    /// The payment reference received from the payment terminal and is used as the value for _idToken_.
    #[validate(length(max = 255))]
    pub psp_ref: String,

    pub status: PaymentStatusEnumType,

    /// Additional information from payment terminal/payment process.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 500))]
    pub status_info: Option<String>,

    /// The amount that was settled, or attempted to be settled (in case of failure).
    pub settlement_amount: Decimal,

    /// The time when the settlement was done.
    pub settlement_time: DateTime<Utc>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 50))]
    pub receipt_id: Option<String>,

    /// The receipt URL, to be used if the receipt is generated by the payment terminal or the CS.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 2000))]
    pub receipt_url: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(nested)]
    pub vat_company: Option<AddressType>,

    /// VAT number for a company receipt.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 20))]
    pub vat_number: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(nested)]
    pub custom_data: Option<CustomDataType>,
}

impl NotifySettlementRequest {
    /// Creates a new instance of the struct.
    ///
    /// * `psp_ref` - The payment reference received from the payment terminal and is used as the value for _idToken_.
    /// * `status` - The status field
    /// * `settlement_amount` - The amount that was settled, or attempted to be settled (in case of failure).
    /// * `settlement_time` - The time when the settlement was done.
    ///
    /// # Returns
    ///
    /// A new instance of the struct with required fields set and optional fields as None.
    pub fn new(psp_ref: String, status: PaymentStatusEnumType, settlement_amount: Decimal, settlement_time: DateTime<Utc>) -> Self {
        Self {
            transaction_id: None,
            psp_ref,
            status,
            status_info: None,
            settlement_amount,
            settlement_time,
            receipt_id: None,
            receipt_url: None,
            vat_company: None,
            vat_number: None,
            custom_data: None,
        }
    }

    /// Sets the transaction_id field.
    ///
    /// * `transaction_id` - The _transactionId_ that the settlement belongs to. Can be empty if the payment transaction is canceled prior to the start of the OCPP transaction.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_transaction_id(&mut self, transaction_id: Option<String>) -> &mut Self {
        self.transaction_id = transaction_id;
        self
    }

    /// Sets the psp_ref field.
    ///
    /// * `psp_ref` - The payment reference received from the payment terminal and is used as the value for _idToken_.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_psp_ref(&mut self, psp_ref: String) -> &mut Self {
        self.psp_ref = psp_ref;
        self
    }

    /// Sets the status field.
    ///
    /// * `status` - The status field
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_status(&mut self, status: PaymentStatusEnumType) -> &mut Self {
        self.status = status;
        self
    }

    /// Sets the status_info field.
    ///
    /// * `status_info` - Additional information from payment terminal/payment process.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_status_info(&mut self, status_info: Option<String>) -> &mut Self {
        self.status_info = status_info;
        self
    }

    /// Sets the settlement_amount field.
    ///
    /// * `settlement_amount` - The amount that was settled, or attempted to be settled (in case of failure).
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_settlement_amount(&mut self, settlement_amount: Decimal) -> &mut Self {
        self.settlement_amount = settlement_amount;
        self
    }

    /// Sets the settlement_time field.
    ///
    /// * `settlement_time` - The time when the settlement was done.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_settlement_time(&mut self, settlement_time: DateTime<Utc>) -> &mut Self {
        self.settlement_time = settlement_time;
        self
    }

    /// Sets the receipt_id field.
    ///
    /// * `receipt_id` - The receipt_id field
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_receipt_id(&mut self, receipt_id: Option<String>) -> &mut Self {
        self.receipt_id = receipt_id;
        self
    }

    /// Sets the receipt_url field.
    ///
    /// * `receipt_url` - The receipt URL, to be used if the receipt is generated by the payment terminal or the CS.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_receipt_url(&mut self, receipt_url: Option<String>) -> &mut Self {
        self.receipt_url = receipt_url;
        self
    }

    /// Sets the vat_company field.
    ///
    /// * `vat_company` - The vat_company field
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_vat_company(&mut self, vat_company: Option<AddressType>) -> &mut Self {
        self.vat_company = vat_company;
        self
    }

    /// Sets the vat_number field.
    ///
    /// * `vat_number` - VAT number for a company receipt.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_vat_number(&mut self, vat_number: Option<String>) -> &mut Self {
        self.vat_number = vat_number;
        self
    }

    /// Sets the custom_data field.
    ///
    /// * `custom_data` - The custom_data field
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_custom_data(&mut self, custom_data: Option<CustomDataType>) -> &mut Self {
        self.custom_data = custom_data;
        self
    }

    /// Gets a reference to the transaction_id field.
    ///
    /// # Returns
    ///
    /// The _transactionId_ that the settlement belongs to. Can be empty if the payment transaction is canceled prior to the start of the OCPP transaction.
    pub fn get_transaction_id(&self) -> Option<&String> {
        self.transaction_id.as_ref()
    }

    /// Gets a reference to the psp_ref field.
    ///
    /// # Returns
    ///
    /// The payment reference received from the payment terminal and is used as the value for _idToken_.
    pub fn get_psp_ref(&self) -> &String {
        &self.psp_ref
    }

    /// Gets a reference to the status field.
    ///
    /// # Returns
    ///
    /// The status field
    pub fn get_status(&self) -> &PaymentStatusEnumType {
        &self.status
    }

    /// Gets a reference to the status_info field.
    ///
    /// # Returns
    ///
    /// Additional information from payment terminal/payment process.
    pub fn get_status_info(&self) -> Option<&String> {
        self.status_info.as_ref()
    }

    /// Gets a reference to the settlement_amount field.
    ///
    /// # Returns
    ///
    /// The amount that was settled, or attempted to be settled (in case of failure).
    pub fn get_settlement_amount(&self) -> &Decimal {
        &self.settlement_amount
    }

    /// Gets a reference to the settlement_time field.
    ///
    /// # Returns
    ///
    /// The time when the settlement was done.
    pub fn get_settlement_time(&self) -> &DateTime<Utc> {
        &self.settlement_time
    }

    /// Gets a reference to the receipt_id field.
    ///
    /// # Returns
    ///
    /// The receipt_id field
    pub fn get_receipt_id(&self) -> Option<&String> {
        self.receipt_id.as_ref()
    }

    /// Gets a reference to the receipt_url field.
    ///
    /// # Returns
    ///
    /// The receipt URL, to be used if the receipt is generated by the payment terminal or the CS.
    pub fn get_receipt_url(&self) -> Option<&String> {
        self.receipt_url.as_ref()
    }

    /// Gets a reference to the vat_company field.
    ///
    /// # Returns
    ///
    /// The vat_company field
    pub fn get_vat_company(&self) -> Option<&AddressType> {
        self.vat_company.as_ref()
    }

    /// Gets a reference to the vat_number field.
    ///
    /// # Returns
    ///
    /// VAT number for a company receipt.
    pub fn get_vat_number(&self) -> Option<&String> {
        self.vat_number.as_ref()
    }

    /// Gets a reference to the custom_data field.
    ///
    /// # Returns
    ///
    /// The custom_data field
    pub fn get_custom_data(&self) -> Option<&CustomDataType> {
        self.custom_data.as_ref()
    }

    /// Sets the transaction_id field and returns self for builder pattern.
    ///
    /// * `transaction_id` - The _transactionId_ that the settlement belongs to. Can be empty if the payment transaction is canceled prior to the start of the OCPP transaction.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_transaction_id(mut self, transaction_id: String) -> Self {
        self.transaction_id = Some(transaction_id);
        self
    }

    /// Sets the status_info field and returns self for builder pattern.
    ///
    /// * `status_info` - Additional information from payment terminal/payment process.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_status_info(mut self, status_info: String) -> Self {
        self.status_info = Some(status_info);
        self
    }

    /// Sets the receipt_id field and returns self for builder pattern.
    ///
    /// * `receipt_id` - The receipt_id field
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_receipt_id(mut self, receipt_id: String) -> Self {
        self.receipt_id = Some(receipt_id);
        self
    }

    /// Sets the receipt_url field and returns self for builder pattern.
    ///
    /// * `receipt_url` - The receipt URL, to be used if the receipt is generated by the payment terminal or the CS.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_receipt_url(mut self, receipt_url: String) -> Self {
        self.receipt_url = Some(receipt_url);
        self
    }

    /// Sets the vat_company field and returns self for builder pattern.
    ///
    /// * `vat_company` - The vat_company field
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_vat_company(mut self, vat_company: AddressType) -> Self {
        self.vat_company = Some(vat_company);
        self
    }

    /// Sets the vat_number field and returns self for builder pattern.
    ///
    /// * `vat_number` - VAT number for a company receipt.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_vat_number(mut self, vat_number: String) -> Self {
        self.vat_number = Some(vat_number);
        self
    }

    /// Sets the custom_data field and returns self for builder pattern.
    ///
    /// * `custom_data` - The custom_data field
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_custom_data(mut self, custom_data: CustomDataType) -> Self {
        self.custom_data = Some(custom_data);
        self
    }

}

/// Response body for the NotifySettlement response.
#[derive(Debug, Clone, PartialEq, Deserialize, Serialize, Validate)]
#[serde(rename_all = "camelCase")]
pub struct NotifySettlementResponse {
    /// The receipt URL if receipt generated by CSMS. The Charging Station can QR encode it and show it to the EV Driver.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 2000))]
    pub receipt_url: Option<String>,

    /// The receipt id if the receipt is generated by CSMS.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(length(max = 50))]
    pub receipt_id: Option<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[validate(nested)]
    pub custom_data: Option<CustomDataType>,
}

impl NotifySettlementResponse {
    /// Creates a new instance of the struct.
    ///
    ///
    /// # Returns
    ///
    /// A new instance of the struct with required fields set and optional fields as None.
    pub fn new() -> Self {
        Self {
            receipt_url: None,
            receipt_id: None,
            custom_data: None,
        }
    }

    /// Sets the receipt_url field.
    ///
    /// * `receipt_url` - The receipt URL if receipt generated by CSMS. The Charging Station can QR encode it and show it to the EV Driver.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_receipt_url(&mut self, receipt_url: Option<String>) -> &mut Self {
        self.receipt_url = receipt_url;
        self
    }

    /// Sets the receipt_id field.
    ///
    /// * `receipt_id` - The receipt id if the receipt is generated by CSMS.
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_receipt_id(&mut self, receipt_id: Option<String>) -> &mut Self {
        self.receipt_id = receipt_id;
        self
    }

    /// Sets the custom_data field.
    ///
    /// * `custom_data` - The custom_data field
    ///
    /// # Returns
    ///
    /// A mutable reference to self for method chaining.
    pub fn set_custom_data(&mut self, custom_data: Option<CustomDataType>) -> &mut Self {
        self.custom_data = custom_data;
        self
    }

    /// Gets a reference to the receipt_url field.
    ///
    /// # Returns
    ///
    /// The receipt URL if receipt generated by CSMS. The Charging Station can QR encode it and show it to the EV Driver.
    pub fn get_receipt_url(&self) -> Option<&String> {
        self.receipt_url.as_ref()
    }

    /// Gets a reference to the receipt_id field.
    ///
    /// # Returns
    ///
    /// The receipt id if the receipt is generated by CSMS.
    pub fn get_receipt_id(&self) -> Option<&String> {
        self.receipt_id.as_ref()
    }

    /// Gets a reference to the custom_data field.
    ///
    /// # Returns
    ///
    /// The custom_data field
    pub fn get_custom_data(&self) -> Option<&CustomDataType> {
        self.custom_data.as_ref()
    }

    /// Sets the receipt_url field and returns self for builder pattern.
    ///
    /// * `receipt_url` - The receipt URL if receipt generated by CSMS. The Charging Station can QR encode it and show it to the EV Driver.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_receipt_url(mut self, receipt_url: String) -> Self {
        self.receipt_url = Some(receipt_url);
        self
    }

    /// Sets the receipt_id field and returns self for builder pattern.
    ///
    /// * `receipt_id` - The receipt id if the receipt is generated by CSMS.
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_receipt_id(mut self, receipt_id: String) -> Self {
        self.receipt_id = Some(receipt_id);
        self
    }

    /// Sets the custom_data field and returns self for builder pattern.
    ///
    /// * `custom_data` - The custom_data field
    ///
    /// # Returns
    ///
    /// Self with the field set.
    pub fn with_custom_data(mut self, custom_data: CustomDataType) -> Self {
        self.custom_data = Some(custom_data);
        self
    }

}

#[cfg(test)]
mod tests {
    use super::*;
    use chrono::Utc;
    use rust_decimal::Decimal;
    use serde_json;
    use validator::Validate;

    fn create_test_custom_data() -> CustomDataType {
        CustomDataType::new("TestVendor".to_string())
    }

    fn create_test_address() -> AddressType {
        AddressType::new(
            "Test Company".to_string(),
            "123 Main St".to_string(),
            "Test City".to_string(),
            "Test Country".to_string(),
        )
    }

    fn create_test_notify_settlement_request() -> NotifySettlementRequest {
        let settlement_amount = Decimal::try_from(25.50).unwrap();
        let settlement_time = Utc::now();
        NotifySettlementRequest::new(
            "test_psp_ref_123".to_string(),
            PaymentStatusEnumType::Settled,
            settlement_amount,
            settlement_time,
        )
    }

    fn create_test_notify_settlement_response() -> NotifySettlementResponse {
        NotifySettlementResponse::new()
    }

    #[test]
    fn test_notify_settlement_request_new() {
        let psp_ref = "test_psp_456".to_string();
        let status = PaymentStatusEnumType::Failed;
        let settlement_amount = Decimal::try_from(100.75).unwrap();
        let settlement_time = Utc::now();

        let request = NotifySettlementRequest::new(
            psp_ref.clone(),
            status.clone(),
            settlement_amount,
            settlement_time,
        );

        assert_eq!(request.psp_ref, psp_ref);
        assert_eq!(request.status, status);
        assert_eq!(request.settlement_amount, settlement_amount);
        assert_eq!(request.settlement_time, settlement_time);
        assert!(request.transaction_id.is_none());
        assert!(request.status_info.is_none());
        assert!(request.receipt_id.is_none());
        assert!(request.receipt_url.is_none());
        assert!(request.vat_company.is_none());
        assert!(request.vat_number.is_none());
        assert!(request.custom_data.is_none());
    }

    #[test]
    fn test_notify_settlement_request_serialization() {
        let request = create_test_notify_settlement_request();

        let json = serde_json::to_string(&request).expect("Failed to serialize");
        let deserialized: NotifySettlementRequest = serde_json::from_str(&json).expect("Failed to deserialize");

        assert_eq!(request, deserialized);
    }

    #[test]
    fn test_notify_settlement_request_validation_valid() {
        let request = create_test_notify_settlement_request();
        assert!(request.validate().is_ok());
    }

    #[test]
    fn test_notify_settlement_request_validation_psp_ref_too_long() {
        let long_psp_ref = "a".repeat(256); // Max is 255
        let settlement_amount = Decimal::try_from(25.50).unwrap();
        let settlement_time = Utc::now();
        let request = NotifySettlementRequest::new(
            long_psp_ref,
            PaymentStatusEnumType::Settled,
            settlement_amount,
            settlement_time,
        );

        let validation_result = request.validate();
        assert!(validation_result.is_err());
        let errors = validation_result.unwrap_err();
        assert!(errors.field_errors().contains_key("psp_ref"));
    }

    #[test]
    fn test_notify_settlement_request_validation_transaction_id_too_long() {
        let mut request = create_test_notify_settlement_request();
        request.transaction_id = Some("a".repeat(37)); // Max is 36

        let validation_result = request.validate();
        assert!(validation_result.is_err());
        let errors = validation_result.unwrap_err();
        assert!(errors.field_errors().contains_key("transaction_id"));
    }

    #[test]
    fn test_notify_settlement_request_validation_status_info_too_long() {
        let mut request = create_test_notify_settlement_request();
        request.status_info = Some("a".repeat(501)); // Max is 500

        let validation_result = request.validate();
        assert!(validation_result.is_err());
        let errors = validation_result.unwrap_err();
        assert!(errors.field_errors().contains_key("status_info"));
    }

    #[test]
    fn test_notify_settlement_request_validation_receipt_id_too_long() {
        let mut request = create_test_notify_settlement_request();
        request.receipt_id = Some("a".repeat(51)); // Max is 50

        let validation_result = request.validate();
        assert!(validation_result.is_err());
        let errors = validation_result.unwrap_err();
        assert!(errors.field_errors().contains_key("receipt_id"));
    }

    #[test]
    fn test_notify_settlement_request_validation_receipt_url_too_long() {
        let mut request = create_test_notify_settlement_request();
        request.receipt_url = Some("a".repeat(2001)); // Max is 2000

        let validation_result = request.validate();
        assert!(validation_result.is_err());
        let errors = validation_result.unwrap_err();
        assert!(errors.field_errors().contains_key("receipt_url"));
    }

    #[test]
    fn test_notify_settlement_request_validation_vat_number_too_long() {
        let mut request = create_test_notify_settlement_request();
        request.vat_number = Some("a".repeat(21)); // Max is 20

        let validation_result = request.validate();
        assert!(validation_result.is_err());
        let errors = validation_result.unwrap_err();
        assert!(errors.field_errors().contains_key("vat_number"));
    }

    #[test]
    fn test_notify_settlement_request_set_methods() {
        let mut request = create_test_notify_settlement_request();
        let new_psp_ref = "new_psp_ref".to_string();
        let new_status = PaymentStatusEnumType::Canceled;
        let new_settlement_amount = Decimal::try_from(50.25).unwrap();
        let new_settlement_time = Utc::now();

        request.set_psp_ref(new_psp_ref.clone())
               .set_status(new_status.clone())
               .set_settlement_amount(new_settlement_amount)
               .set_settlement_time(new_settlement_time)
               .set_transaction_id(Some("new_transaction".to_string()))
               .set_status_info(Some("New status info".to_string()));

        assert_eq!(request.psp_ref, new_psp_ref);
        assert_eq!(request.status, new_status);
        assert_eq!(request.settlement_amount, new_settlement_amount);
        assert_eq!(request.settlement_time, new_settlement_time);
        assert_eq!(request.transaction_id, Some("new_transaction".to_string()));
        assert_eq!(request.status_info, Some("New status info".to_string()));
    }

    #[test]
    fn test_notify_settlement_request_get_methods() {
        let request = create_test_notify_settlement_request();

        assert_eq!(request.get_psp_ref(), &request.psp_ref);
        assert_eq!(request.get_status(), &request.status);
        assert_eq!(request.get_settlement_amount(), &request.settlement_amount);
        assert_eq!(request.get_settlement_time(), &request.settlement_time);
        assert_eq!(request.get_transaction_id(), None);
        assert_eq!(request.get_status_info(), None);
        assert_eq!(request.get_receipt_id(), None);
        assert_eq!(request.get_receipt_url(), None);
        assert_eq!(request.get_vat_company(), None);
        assert_eq!(request.get_vat_number(), None);
        assert_eq!(request.get_custom_data(), None);
    }

    #[test]
    fn test_notify_settlement_request_with_methods() {
        let custom_data = create_test_custom_data();
        let address = create_test_address();

        let request = create_test_notify_settlement_request()
            .with_transaction_id("test_transaction".to_string())
            .with_status_info("Test status info".to_string())
            .with_receipt_id("receipt_123".to_string())
            .with_receipt_url("https://example.com/receipt".to_string())
            .with_vat_company(address.clone())
            .with_vat_number("VAT123456".to_string())
            .with_custom_data(custom_data.clone());

        assert_eq!(request.transaction_id, Some("test_transaction".to_string()));
        assert_eq!(request.status_info, Some("Test status info".to_string()));
        assert_eq!(request.receipt_id, Some("receipt_123".to_string()));
        assert_eq!(request.receipt_url, Some("https://example.com/receipt".to_string()));
        assert_eq!(request.vat_company, Some(address));
        assert_eq!(request.vat_number, Some("VAT123456".to_string()));
        assert_eq!(request.custom_data, Some(custom_data));
    }

    #[test]
    fn test_notify_settlement_request_payment_status_variants() {
        let settlement_amount = Decimal::try_from(25.50).unwrap();
        let settlement_time = Utc::now();

        // Test all payment status variants
        let statuses = vec![
            PaymentStatusEnumType::Settled,
            PaymentStatusEnumType::Canceled,
            PaymentStatusEnumType::Rejected,
            PaymentStatusEnumType::Failed,
        ];

        for status in statuses {
            let request = NotifySettlementRequest::new(
                "test_psp_ref".to_string(),
                status.clone(),
                settlement_amount,
                settlement_time,
            );
            assert_eq!(request.status, status);
            assert!(request.validate().is_ok());
        }
    }

    #[test]
    fn test_notify_settlement_request_boundary_values() {
        let settlement_amount = Decimal::try_from(25.50).unwrap();
        let settlement_time = Utc::now();

        // Test maximum length values
        let max_psp_ref = "a".repeat(255);
        let max_transaction_id = "a".repeat(36);
        let max_status_info = "a".repeat(500);
        let max_receipt_id = "a".repeat(50);
        let max_receipt_url = "a".repeat(2000);
        let max_vat_number = "a".repeat(20);

        let request = NotifySettlementRequest::new(
            max_psp_ref.clone(),
            PaymentStatusEnumType::Settled,
            settlement_amount,
            settlement_time,
        )
        .with_transaction_id(max_transaction_id.clone())
        .with_status_info(max_status_info.clone())
        .with_receipt_id(max_receipt_id.clone())
        .with_receipt_url(max_receipt_url.clone())
        .with_vat_number(max_vat_number.clone());

        assert!(request.validate().is_ok());
        assert_eq!(request.psp_ref, max_psp_ref);
        assert_eq!(request.transaction_id, Some(max_transaction_id));
        assert_eq!(request.status_info, Some(max_status_info));
        assert_eq!(request.receipt_id, Some(max_receipt_id));
        assert_eq!(request.receipt_url, Some(max_receipt_url));
        assert_eq!(request.vat_number, Some(max_vat_number));
    }

    #[test]
    fn test_notify_settlement_request_json_format() {
        let request = create_test_notify_settlement_request();
        let json = serde_json::to_value(&request).expect("Failed to serialize to JSON");

        assert!(json.get("pspRef").is_some());
        assert!(json.get("status").is_some());
        assert!(json.get("settlementAmount").is_some());
        assert!(json.get("settlementTime").is_some());

        // Optional fields should not be present if None
        if request.transaction_id.is_none() {
            assert!(json.get("transactionId").is_none());
        }
        if request.status_info.is_none() {
            assert!(json.get("statusInfo").is_none());
        }
        if request.receipt_id.is_none() {
            assert!(json.get("receiptId").is_none());
        }
        if request.receipt_url.is_none() {
            assert!(json.get("receiptUrl").is_none());
        }
        if request.vat_company.is_none() {
            assert!(json.get("vatCompany").is_none());
        }
        if request.vat_number.is_none() {
            assert!(json.get("vatNumber").is_none());
        }
        if request.custom_data.is_none() {
            assert!(json.get("customData").is_none());
        }
    }

    #[test]
    fn test_notify_settlement_response_new() {
        let response = NotifySettlementResponse::new();
        assert!(response.receipt_url.is_none());
        assert!(response.receipt_id.is_none());
        assert!(response.custom_data.is_none());
    }

    #[test]
    fn test_notify_settlement_response_serialization() {
        let response = create_test_notify_settlement_response();

        let json = serde_json::to_string(&response).expect("Failed to serialize");
        let deserialized: NotifySettlementResponse = serde_json::from_str(&json).expect("Failed to deserialize");

        assert_eq!(response, deserialized);
    }

    #[test]
    fn test_notify_settlement_response_validation_valid() {
        let response = create_test_notify_settlement_response();
        assert!(response.validate().is_ok());
    }

    #[test]
    fn test_notify_settlement_response_validation_receipt_url_too_long() {
        let mut response = create_test_notify_settlement_response();
        response.receipt_url = Some("a".repeat(2001)); // Max is 2000

        let validation_result = response.validate();
        assert!(validation_result.is_err());
        let errors = validation_result.unwrap_err();
        assert!(errors.field_errors().contains_key("receipt_url"));
    }

    #[test]
    fn test_notify_settlement_response_validation_receipt_id_too_long() {
        let mut response = create_test_notify_settlement_response();
        response.receipt_id = Some("a".repeat(51)); // Max is 50

        let validation_result = response.validate();
        assert!(validation_result.is_err());
        let errors = validation_result.unwrap_err();
        assert!(errors.field_errors().contains_key("receipt_id"));
    }

    #[test]
    fn test_notify_settlement_response_set_methods() {
        let mut response = create_test_notify_settlement_response();
        let custom_data = create_test_custom_data();

        response.set_receipt_url(Some("https://example.com/receipt".to_string()))
                .set_receipt_id(Some("receipt_456".to_string()))
                .set_custom_data(Some(custom_data.clone()));

        assert_eq!(response.receipt_url, Some("https://example.com/receipt".to_string()));
        assert_eq!(response.receipt_id, Some("receipt_456".to_string()));
        assert_eq!(response.custom_data, Some(custom_data));
    }

    #[test]
    fn test_notify_settlement_response_get_methods() {
        let response = create_test_notify_settlement_response();
        assert_eq!(response.get_receipt_url(), None);
        assert_eq!(response.get_receipt_id(), None);
        assert_eq!(response.get_custom_data(), None);
    }

    #[test]
    fn test_notify_settlement_response_with_methods() {
        let custom_data = create_test_custom_data();

        let response = create_test_notify_settlement_response()
            .with_receipt_url("https://example.com/receipt".to_string())
            .with_receipt_id("receipt_789".to_string())
            .with_custom_data(custom_data.clone());

        assert_eq!(response.receipt_url, Some("https://example.com/receipt".to_string()));
        assert_eq!(response.receipt_id, Some("receipt_789".to_string()));
        assert_eq!(response.custom_data, Some(custom_data));
    }

    #[test]
    fn test_notify_settlement_response_boundary_values() {
        // Test maximum length values
        let max_receipt_url = "a".repeat(2000);
        let max_receipt_id = "a".repeat(50);

        let response = create_test_notify_settlement_response()
            .with_receipt_url(max_receipt_url.clone())
            .with_receipt_id(max_receipt_id.clone());

        assert!(response.validate().is_ok());
        assert_eq!(response.receipt_url, Some(max_receipt_url));
        assert_eq!(response.receipt_id, Some(max_receipt_id));
    }

    #[test]
    fn test_notify_settlement_response_json_format() {
        let response = create_test_notify_settlement_response();
        let json = serde_json::to_value(&response).expect("Failed to serialize to JSON");

        // Optional fields should not be present if None
        if response.receipt_url.is_none() {
            assert!(json.get("receiptUrl").is_none());
        }
        if response.receipt_id.is_none() {
            assert!(json.get("receiptId").is_none());
        }
        if response.custom_data.is_none() {
            assert!(json.get("customData").is_none());
        }
    }

    #[test]
    fn test_notify_settlement_decimal_amounts() {
        let settlement_time = Utc::now();

        // Test various decimal amounts
        let amounts = vec![
            Decimal::try_from(0.01).unwrap(),
            Decimal::try_from(1.00).unwrap(),
            Decimal::try_from(99.99).unwrap(),
            Decimal::try_from(1000.50).unwrap(),
            Decimal::try_from(9999999.99).unwrap(),
        ];

        for amount in amounts {
            let request = NotifySettlementRequest::new(
                "test_psp_ref".to_string(),
                PaymentStatusEnumType::Settled,
                amount,
                settlement_time,
            );
            assert_eq!(request.settlement_amount, amount);
            assert!(request.validate().is_ok());

            // Test serialization/deserialization preserves decimal precision
            let json = serde_json::to_string(&request).expect("Failed to serialize");
            let deserialized: NotifySettlementRequest = serde_json::from_str(&json).expect("Failed to deserialize");
            assert_eq!(request.settlement_amount, deserialized.settlement_amount);
        }
    }

    #[test]
    fn test_notify_settlement_round_trip_with_all_fields() {
        let custom_data = create_test_custom_data();
        let address = create_test_address();
        let settlement_amount = Decimal::try_from(123.45).unwrap();
        let settlement_time = Utc::now();

        let request = NotifySettlementRequest::new(
            "complete_psp_ref".to_string(),
            PaymentStatusEnumType::Settled,
            settlement_amount,
            settlement_time,
        )
        .with_transaction_id("complete_transaction".to_string())
        .with_status_info("Complete status info".to_string())
        .with_receipt_id("complete_receipt".to_string())
        .with_receipt_url("https://complete.example.com/receipt".to_string())
        .with_vat_company(address)
        .with_vat_number("COMPLETE123".to_string())
        .with_custom_data(custom_data.clone());

        let response = create_test_notify_settlement_response()
            .with_receipt_url("https://response.example.com/receipt".to_string())
            .with_receipt_id("response_receipt".to_string())
            .with_custom_data(custom_data);

        // Test request round trip
        let request_json = serde_json::to_string(&request).expect("Failed to serialize request");
        let request_deserialized: NotifySettlementRequest = serde_json::from_str(&request_json).expect("Failed to deserialize request");
        assert_eq!(request, request_deserialized);

        // Test response round trip
        let response_json = serde_json::to_string(&response).expect("Failed to serialize response");
        let response_deserialized: NotifySettlementResponse = serde_json::from_str(&response_json).expect("Failed to deserialize response");
        assert_eq!(response, response_deserialized);
    }
}